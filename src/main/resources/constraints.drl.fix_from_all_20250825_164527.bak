package curriculumcourse.curriculumcourse;

import java.lang.Number;
import curriculumcourse.curriculumcourse.Course;
import curriculumcourse.curriculumcourse.Curriculum;
import curriculumcourse.curriculumcourse.Day;
import curriculumcourse.curriculumcourse.Lecture;
import curriculumcourse.curriculumcourse.Period;
import curriculumcourse.curriculumcourse.Room;
import curriculumcourse.curriculumcourse.Teacher;

global org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder scoreHolder;

// -----------------------------
// HARD constraints
// -----------------------------

// 1) Room occupancy: same room & period cannot host two lectures at the same time.
rule "Room occupancy"
when
    $a: curriculumcourse.curriculumcourse.Lecture( $r: room, $p: period )
    curriculumcourse.curriculumcourse.Room() from $r
    curriculumcourse.curriculumcourse.Period() from $p
    $b: curriculumcourse.curriculumcourse.Lecture( this != $a,
                                                   room == $r,
                                                   period == $p,
                                                   eval(System.identityHashCode(this) > System.identityHashCode($a)) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 2) Teacher conflict: the same teacher cannot teach two lectures in the same period.

// 3) Lecture conflict - same course in same period.
rule "Lecture conflict - same course in same period"
when
    $a: curriculumcourse.curriculumcourse.Lecture( $c: course, $p: period )
    curriculumcourse.curriculumcourse.Course() from $c
    $b: curriculumcourse.curriculumcourse.Lecture( this != $a,
                                                   course == $c,
                                                   period == $p,
                                                   eval(System.identityHashCode(this) > System.identityHashCode($a)) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 4) Lecture conflict - curriculum: two lectures from the same curriculum cannot be in the same period.
rule "Lecture conflict - curriculum"
when
    $a: curriculumcourse.curriculumcourse.Lecture( $p: period, $cA: course )
    curriculumcourse.curriculumcourse.Course( $cur: curriculum ) from $cA
    $b: curriculumcourse.curriculumcourse.Lecture( this != $a,
                                                   period == $p,
                                                   eval( $b.course != null && $b.course.getCurriculum() == $cur ),
                                                   eval(System.identityHashCode(this) > System.identityHashCode($a)) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// 5) Room capacity: penalize excess students over room capacity.
rule "Room capacity"
when
    $l: curriculumcourse.curriculumcourse.Lecture( $r: room, $c: course )
    curriculumcourse.curriculumcourse.Room( $cap: capacity ) from $r
    curriculumcourse.curriculumcourse.Course( $size: studentSize ) from $c
    eval( $cap < $size )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1 * ($size - $cap));
end

// -----------------------------
// SOFT constraints
// -----------------------------

// 6) Minimum working days: each course should span at least minWorkingDaySize distinct days.
//    Penalty: 5 points per missing day.
rule "Minimum working days"
when
    $c : curriculumcourse.curriculumcourse.Course( $min : minWorkingDaySize )
    accumulate(
        curriculumcourse.curriculumcourse.Lecture( course == $c, $d : period.day ),
        $daySet : collectSet( $d )
    )
    eval( $daySet.size() < $min )
then
    // 靘?min=2?祕???憭?-> 蝵?5 * (2 - 1) = -5
    scoreHolder.addSoftConstraintMatch(kcontext, -5 * ($min - $daySet.size()));
end

// 7) Room stability: prefer keeping all lectures of the same course in a single room.
//    Penalty: one point for each extra distinct room beyond the first.
rule "Room stability"
when
    $course: Course()
    accumulate(
        $room: Room() and exists( Lecture( course == $course, room == $room ) );
        $roomCount: count($room);
        $roomCount > 1
    )
then
    scoreHolder.addSoftConstraintMatch(kcontext, -1 * ($roomCount.intValue() - 1));
end

rule "Teacher conflict"
when
    $a: curriculumcourse.curriculumcourse.Lecture( $p: period, $t: teacher )
    curriculumcourse.curriculumcourse.Teacher() from $t
    $b: curriculumcourse.curriculumcourse.Lecture( this != $a,
                                                   period == $p,
                                                   teacher == $t,
                                                   eval(System.identityHashCode(this) > System.identityHashCode($a)) )
then
    scoreHolder.addHardConstraintMatch(kcontext, -1);
end